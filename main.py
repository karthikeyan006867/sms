# ------------------------- College Management System (Complete Full Version) -------------------------
# Author: Generated by ChatGPT
# Features: Admin/Teacher/Student, Attendance, Marks, Fees, Certificates, Reports, Dashboards
# Python: 3.8+
# JSON Storage: cms_data directory
import random
import json
import os
import csv
from datetime import datetime
from colorama import init, Fore, Style

# ------------------------- Initialize colorama -------------------------
init(autoreset=True)

# ------------------------- Data Paths -------------------------
DATA_DIR = "cms_data"
STUDENT_FILE = os.path.join(DATA_DIR, "students.json")
TEACHER_FILE = os.path.join(DATA_DIR, "teachers.json")
COURSE_FILE = os.path.join(DATA_DIR, "courses.json")
DEPARTMENT_FILE = os.path.join(DATA_DIR, "departments.json")
ATTENDANCE_FILE = os.path.join(DATA_DIR, "attendance.json")
MARKS_FILE = os.path.join(DATA_DIR, "marks.json")
FEES_FILE = os.path.join(DATA_DIR, "fees.json")
CERTIFICATE_FILE = os.path.join(DATA_DIR, "certificates.json")
DATA_FOLDER = "data"
STUDENT_FILE = os.path.join(DATA_FOLDER, "students.json")
TEACHER_FILE = os.path.join(DATA_FOLDER, "teachers.json")
DEPARTMENT_FILE = os.path.join(DATA_FOLDER, "departments.json")
COURSE_FILE = os.path.join(DATA_FOLDER, "courses.json")
ATTENDANCE_FILE = os.path.join(DATA_FOLDER, "attendance.json")
MARKS_FILE = os.path.join(DATA_FOLDER, "marks.json")
FEES_FILE = os.path.join(DATA_FOLDER, "fees.json")
CERTIFICATE_FILE = os.path.join(DATA_FOLDER, "certificates.json")

def ensure_data_files():
    if not os.path.exists(DATA_FOLDER):
        os.makedirs(DATA_FOLDER)
    files = [STUDENT_FILE, TEACHER_FILE, DEPARTMENT_FILE, COURSE_FILE, ATTENDANCE_FILE, MARKS_FILE, FEES_FILE, CERTIFICATE_FILE]
    for f in files:
        if not os.path.exists(f):
            with open(f, "w") as file:
                json.dump([], file)

# Call this before anything else
ensure_data_files()

# ------------------------- Helper Functions -------------------------
def ensure_data_dir ( ) :
    if not os.path.exists(DATA_DIR) :
        os.makedirs(DATA_DIR)


def load_data (file) :
    if os.path.exists(file) :
        with open(file, "r") as f :
            return json.load(f)
    else :
        return []


def save_data (file, data) :
    with open(file, "w") as f :
        json.dump(data, f, indent=4)


def print_line ( ) :
    print(Fore.CYAN + "-" * 80)


def pause ( ) :
    input(Fore.YELLOW + "\nPress Enter to continue...")


def export_csv (filename, data, fieldnames) :
    if not data :
        print(Fore.RED + f"No data to export for {filename}")
        return
    with open(filename, 'w', newline='') as csvfile :
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(data)
    print(Fore.GREEN + f"Data exported successfully to {filename}")


def generate_student_id (students) :
    if not students :
        return "S00001"
    last_id = sorted([int(s["id"][1 :]) for s in students])[-1]
    return f"S{str(last_id + 1).zfill(5)}"


def generate_teacher_username (teachers, name) :
    base = ''.join(name.lower().split())
    i = 1
    username = base
    existing_usernames = [t["username"] for t in teachers]
    while username in existing_usernames :
        username = f"{base}{i}"
        i += 1
    return username


# ------------------------- Activation & Sample Data -------------------------
def activate_system ( ) :
    ensure_data_dir()
    if not os.path.exists(STUDENT_FILE) :
        save_data(STUDENT_FILE, [{"id" : "S00001", "name" : "Alice", "department" : "CSE"},
                                 {"id" : "S00002", "name" : "Bob", "department" : "ECE"}])
    if not os.path.exists(TEACHER_FILE) :
        save_data(TEACHER_FILE,
                  [{"name" : "John Doe", "username" : "jdoe", "password" : "pass123", "department" : "CSE"}])
    if not os.path.exists(DEPARTMENT_FILE) :
        save_data(DEPARTMENT_FILE, [{"name" : "CSE"}, {"name" : "ECE"}, {"name" : "ME"}])
    if not os.path.exists(COURSE_FILE) :
        save_data(COURSE_FILE, [
            {"code" : "CSE101", "name" : "Computer Science Basics", "department" : "CSE", "teacher" : "jdoe",
             "students" : ["S00001"]}])
    if not os.path.exists(ATTENDANCE_FILE) :
        save_data(ATTENDANCE_FILE, [])
    if not os.path.exists(MARKS_FILE) :
        save_data(MARKS_FILE, [])
    if not os.path.exists(FEES_FILE) :
        save_data(FEES_FILE, [])
    if not os.path.exists(CERTIFICATE_FILE) :
        save_data(CERTIFICATE_FILE, [])


# ------------------------- Login System -------------------------
def login ( ) :
    print(Fore.CYAN + "\n==== College Management System ====")
    print("Login as:")
    print("1. Admin")
    print("2. Teacher")
    print("3. Student")
    choice = input("Select (1-3): ")

    if choice == "1" :
        username = input("Admin Username: ")
        password = input("Admin Password: ")
        if username == "admin" and password == "admin" :
            print(Fore.GREEN + "Login Successful! (Admin)")
            admin_menu()
        else :
            print(Fore.RED + "Invalid credentials!")
    elif choice == "2" :
        username = input("Teacher Username: ")
        password = input("Teacher Password: ")
        teachers = load_data(TEACHER_FILE)
        for t in teachers :
            if t["username"] == username and t["password"] == password :
                print(Fore.GREEN + f"Login Successful! (Teacher: {username})")
                teacher_menu(username)
                return
        print(Fore.RED + "Invalid credentials!")
    elif choice == "3" :
        student_id = input("Student ID: ")
        students = load_data(STUDENT_FILE)
        if any(s["id"] == student_id for s in students) :
            print(Fore.GREEN + f"Login Successful! (Student: {student_id})")
            student_menu(student_id)
        else :
            print(Fore.RED + "Student ID not found!")
    else :
        print(Fore.RED + "Invalid choice!")


# ------------------------- Student Menu -------------------------
def student_menu (student_id) :
    students = load_data(STUDENT_FILE)
    attendance = load_data(ATTENDANCE_FILE)
    marks = load_data(MARKS_FILE)
    certificates = load_data(CERTIFICATE_FILE)
    fees = load_data(FEES_FILE)
    student = next((s for s in students if s["id"] == student_id), None)
    if not student :
        print(Fore.RED + "Student not found!")
        return
    while True :
        print_line()
        print(Fore.MAGENTA + f"Student Menu - {student['name']} (Dept: {student['department']})")
        print("1. View Attendance Summary")
        print("2. View Marks / Progress Summary")
        print("3. View Certificates")
        print("4. View Fees Status")
        print("5. Search Courses")
        print("0. Logout")
        choice = input("Select: ")
        if choice == "1" :
            view_student_attendance(student_id)
        elif choice == "2" :
            view_student_marks(student_id)
        elif choice == "3" :
            view_student_certificates(student_id)
        elif choice == "4" :
            view_student_fees(student_id)
        elif choice == "5" :
            search_courses(student_id)
        elif choice == "0" :
            break
        else :
            print(Fore.RED + "Invalid choice!")


# ------------------------- Admin Menu -------------------------
def admin_menu ( ) :
    while True :
        print_line()
        print(Fore.MAGENTA + "--- Admin Menu ---")
        print("1. Manage Departments")
        print("2. Manage Students")
        print("3. Manage Teachers")
        print("4. Manage Courses")
        print("5. Manage Attendance")
        print("6. Manage Marks")
        print("7. Manage Fees")
        print("8. Manage Certificates")
        print("9. View Reports & Export CSV")
        print("10. Dashboards & Statistics")
        print("0. Logout")
        choice = input("Select: ")
        if choice == "1" :
            manage_departments()
        elif choice == "2" :
            manage_students()
        elif choice == "3" :
            manage_teachers()
        elif choice == "4" :
            manage_courses()
        elif choice == "5" :
            manage_attendance(admin=True)
        elif choice == "6" :
            manage_marks(admin=True)
        elif choice == "7" :
            manage_fees()
        elif choice == "8" :
            manage_certificates()
        elif choice == "9" :
            view_reports()
        elif choice == "10" :
            dashboards_statistics()
        elif choice == "0" :
            break
        else :
            print(Fore.RED + "Invalid choice!")


# ------------------------- Teacher Menu -------------------------
def teacher_menu (username) :
    while True :
        print_line()
        print(Fore.MAGENTA + f"Teacher Menu ({username})")
        print("1. Manage Attendance")
        print("2. Manage Marks")
        print("3. View Courses & Student Summary")
        print("4. Search Students")
        print("0. Logout")
        choice = input("Select: ")
        if choice == "1" :
            manage_attendance(teacher=username)
        elif choice == "2" :
            manage_marks(teacher=username)
        elif choice == "3" :
            view_teacher_courses(username, summary=True)
        elif choice == "4" :
            search_students()
        elif choice == "0" :
            break
        else :
            print(Fore.RED + "Invalid choice!")


# ------------------------- Student Features -------------------------
def view_student_attendance (student_id) :
    courses = load_data(COURSE_FILE)
    attendance = load_data(ATTENDANCE_FILE)
    student_courses = [c for c in courses if student_id in c["students"]]
    print(Fore.CYAN + f"Attendance Summary for Student ID {student_id}:")
    for c in student_courses :
        total = len([a for a in attendance if a["id"] == student_id and a["course"] == c["code"]])
        present = len(
            [a for a in attendance if a["id"] == student_id and a["course"] == c["code"] and a["status"] == "P"])
        percent = (present / total * 100) if total > 0 else 0
        print(Fore.YELLOW + f"{c['name']} ({c['code']}): {present}/{total} ({percent:.2f}%)")
    pause()


def view_student_marks (student_id) :
    marks = load_data(MARKS_FILE)
    student_marks = [m for m in marks if m["id"] == student_id]
    if student_marks :
        course_dict = {}
        for m in student_marks :
            course_dict.setdefault(m["course"], []).append(int(m["mark"]))
        print(Fore.CYAN + f"Marks Summary for Student ID {student_id}:")
        for course, marks_list in course_dict.items() :
            avg = sum(marks_list) / len(marks_list)
            print(Fore.YELLOW + f"{course}: Marks={marks_list}, Average={avg:.2f}")
    else :
        print(Fore.RED + "No marks found.")
    pause()


def view_student_certificates (student_id) :
    certificates = load_data(CERTIFICATE_FILE)
    student_certs = [c for c in certificates if c["id"] == student_id]
    if student_certs :
        for c in student_certs :
            print(Fore.CYAN + f"Certificate: {c['certificate']}, Date: {c['date']}")
    else :
        print(Fore.RED + "No certificates found.")
    pause()


def view_student_fees (student_id) :
    fees = load_data(FEES_FILE)
    student_fees = [f for f in fees if f["id"] == student_id]
    if student_fees :
        for f in student_fees :
            print(Fore.CYAN + f"Amount: {f['amount']}, Status: {f['status']}")
    else :
        print(Fore.RED + "No fee records found.")
    pause()


def search_courses (student_id=None) :
    courses = load_data(COURSE_FILE)
    keyword = input("Enter keyword to search courses: ").lower()
    results = [c for c in courses if keyword in c["name"].lower() or keyword in c["code"].lower()]
    if results :
        for c in results :
            enrolled = "Yes" if student_id and student_id in c["students"] else "No"
            print(Fore.CYAN + f"{c['code']} - {c['name']} | Dept: {c['department']} | Enrolled: {enrolled}")
    else :
        print(Fore.RED + "No courses found.")
    pause()

# ------------------------- The Full CRUD Management Functions (All Features) -------------------------
# Due to length, I will continue the remaining full CRUD, Attendance, Marks, Fees, Certificates,
# Reports, Dashboards, CSV export in the next message because this will be over 4000+ lines total.
# ------------------------- CRUD Management Functions -------------------------

# ------------------------- Departments -------------------------
def manage_departments():
    departments = load_data(DEPARTMENT_FILE)
    while True:
        print_line()
        print(Fore.GREEN + "--- Manage Departments ---")
        print("1. Add Department")
        print("2. Edit Department")
        print("3. Delete Department")
        print("4. List Departments")
        print("0. Back")
        choice = input("Select: ")
        if choice=="1":
            name = input("Department Name: ")
            if any(d["name"].lower()==name.lower() for d in departments):
                print(Fore.RED + "Department already exists!")
            else:
                departments.append({"name": name})
                save_data(DEPARTMENT_FILE, departments)
                print(Fore.GREEN + "Department added!")
        elif choice=="2":
            list_departments(departments)
            idx = int(input("Enter department index to edit: ")) -1
            if 0 <= idx < len(departments):
                new_name = input("New Department Name: ")
                departments[idx]["name"] = new_name
                save_data(DEPARTMENT_FILE, departments)
                print(Fore.GREEN + "Department updated!")
            else:
                print(Fore.RED + "Invalid index!")
        elif choice=="3":
            list_departments(departments)
            idx = int(input("Enter department index to delete: ")) -1
            if 0 <= idx < len(departments):
                removed = departments.pop(idx)
                save_data(DEPARTMENT_FILE, departments)
                print(Fore.GREEN + f"Department {removed['name']} deleted!")
            else:
                print(Fore.RED + "Invalid index!")
        elif choice=="4":
            list_departments(departments)
        elif choice=="0": break
        else: print(Fore.RED + "Invalid choice!")

def list_departments(departments):
    print(Fore.CYAN + "Departments:")
    for i, d in enumerate(departments,1):
        print(f"{i}. {d['name']}")
    pause()

# ------------------------- Students -------------------------
def manage_students():
    students = load_data(STUDENT_FILE)
    departments = load_data(DEPARTMENT_FILE)
    while True:
        print_line()
        print(Fore.GREEN + "--- Manage Students ---")
        print("1. Add Student")
        print("2. Edit Student")
        print("3. Delete Student")
        print("4. List Students")
        print("5. Export Students CSV")
        print("0. Back")
        choice = input("Select: ")
        if choice=="1":
            name = input("Student Name: ")
            list_departments(departments)
            dept_idx = int(input("Select Department Index: ")) -1
            if 0<=dept_idx<len(departments):
                dept_name = departments[dept_idx]["name"]
                new_id = generate_student_id(students)
                students.append({"id": new_id, "name": name, "department": dept_name})
                save_data(STUDENT_FILE, students)
                print(Fore.GREEN + f"Student {name} added with ID {new_id}")
            else:
                print(Fore.RED + "Invalid department!")
        elif choice=="2":
            list_students(students)
            sid = input("Enter Student ID to edit: ")
            student = next((s for s in students if s["id"]==sid), None)
            if student:
                student["name"]=input(f"New Name [{student['name']}]: ") or student["name"]
                list_departments(departments)
                dept_idx = input(f"New Department index [{student['department']}]: ")
                if dept_idx:
                    dept_idx=int(dept_idx)-1
                    if 0<=dept_idx<len(departments):
                        student["department"]=departments[dept_idx]["name"]
                save_data(STUDENT_FILE, students)
                print(Fore.GREEN + "Student updated!")
            else:
                print(Fore.RED + "Student not found!")
        elif choice=="3":
            list_students(students)
            sid = input("Enter Student ID to delete: ")
            student = next((s for s in students if s["id"]==sid), None)
            if student:
                students.remove(student)
                save_data(STUDENT_FILE, students)
                print(Fore.GREEN + "Student deleted!")
            else:
                print(Fore.RED + "Student not found!")
        elif choice=="4":
            list_students(students)
        elif choice=="5":
            fieldnames=["id","name","department"]
            export_csv("students.csv", students, fieldnames)
        elif choice=="0": break
        else: print(Fore.RED + "Invalid choice!")

def list_students(students):
    print(Fore.CYAN + "Students:")
    for s in students:
        print(f"{s['id']} | {s['name']} | Dept: {s['department']}")
    pause()

# ------------------------- Teachers -------------------------
def manage_teachers():
    teachers = load_data(TEACHER_FILE)
    departments = load_data(DEPARTMENT_FILE)
    while True:
        print_line()
        print(Fore.GREEN + "--- Manage Teachers ---")
        print("1. Add Teacher")
        print("2. Edit Teacher")
        print("3. Delete Teacher")
        print("4. List Teachers")
        print("5. Export Teachers CSV")
        print("0. Back")
        choice = input("Select: ")
        if choice=="1":
            name = input("Teacher Name: ")
            username = generate_teacher_username(teachers, name)
            password = input("Set Password: ")
            list_departments(departments)
            dept_idx = int(input("Select Department Index: ")) -1
            if 0<=dept_idx<len(departments):
                dept_name = departments[dept_idx]["name"]
                teachers.append({"name": name, "username": username, "password": password, "department": dept_name})
                save_data(TEACHER_FILE, teachers)
                print(Fore.GREEN + f"Teacher {name} added with username {username}")
            else:
                print(Fore.RED + "Invalid department!")
        elif choice=="2":
            list_teachers(teachers)
            uname=input("Enter Teacher Username to edit: ")
            teacher=next((t for t in teachers if t["username"]==uname),None)
            if teacher:
                teacher["name"]=input(f"New Name [{teacher['name']}]: ") or teacher["name"]
                teacher["password"]=input(f"New Password [{teacher['password']}]: ") or teacher["password"]
                list_departments(departments)
                dept_idx=input(f"New Department index [{teacher['department']}]: ")
                if dept_idx:
                    dept_idx=int(dept_idx)-1
                    if 0<=dept_idx<len(departments):
                        teacher["department"]=departments[dept_idx]["name"]
                save_data(TEACHER_FILE, teachers)
                print(Fore.GREEN + "Teacher updated!")
            else:
                print(Fore.RED + "Teacher not found!")
        elif choice=="3":
            list_teachers(teachers)
            uname=input("Enter Teacher Username to delete: ")
            teacher=next((t for t in teachers if t["username"]==uname),None)
            if teacher:
                teachers.remove(teacher)
                save_data(TEACHER_FILE, teachers)
                print(Fore.GREEN + "Teacher deleted!")
            else:
                print(Fore.RED + "Teacher not found!")
        elif choice=="4":
            list_teachers(teachers)
        elif choice=="5":
            fieldnames=["name","username","password","department"]
            export_csv("teachers.csv", teachers, fieldnames)
        elif choice=="0": break
        else: print(Fore.RED + "Invalid choice!")

def list_teachers(teachers):
    print(Fore.CYAN + "Teachers:")
    for t in teachers:
        print(f"{t['username']} | {t['name']} | Dept: {t['department']}")
    pause()

# ------------------------- Courses -------------------------
def manage_courses():
    courses = load_data(COURSE_FILE)
    departments = load_data(DEPARTMENT_FILE)
    teachers = load_data(TEACHER_FILE)
    students = load_data(STUDENT_FILE)
    while True:
        print_line()
        print(Fore.GREEN + "--- Manage Courses ---")
        print("1. Add Course")
        print("2. Edit Course")
        print("3. Delete Course")
        print("4. List Courses")
        print("5. Export Courses CSV")
        print("0. Back")
        choice = input("Select: ")
        if choice=="1":
            code=input("Course Code: ")
            name=input("Course Name: ")
            list_departments(departments)
            dept_idx=int(input("Select Department Index: "))-1
            if 0<=dept_idx<len(departments):
                dept_name=departments[dept_idx]["name"]
            else: print(Fore.RED + "Invalid dept!"); continue
            list_teachers(teachers)
            t_idx=input("Enter Teacher Username: ")
            if any(t["username"]==t_idx for t in teachers):
                teacher_username=t_idx
            else: print(Fore.RED + "Invalid teacher!"); continue
            courses.append({"code":code,"name":name,"department":dept_name,"teacher":teacher_username,"students":[]})
            save_data(COURSE_FILE,courses)
            print(Fore.GREEN + f"Course {name} added!")
        elif choice=="2":
            list_courses(courses)
            code=input("Enter Course Code to edit: ")
            course=next((c for c in courses if c["code"]==code),None)
            if course:
                course["name"]=input(f"New Name [{course['name']}]: ") or course["name"]
                save_data(COURSE_FILE,courses)
                print(Fore.GREEN + "Course updated!")
            else: print(Fore.RED + "Course not found!")
        elif choice=="3":
            list_courses(courses)
            code=input("Enter Course Code to delete: ")
            course=next((c for c in courses if c["code"]==code),None)
            if course:
                courses.remove(course)
                save_data(COURSE_FILE,courses)
                print(Fore.GREEN + "Course deleted!")
            else: print(Fore.RED + "Course not found!")
        elif choice=="4": list_courses(courses)
        elif choice=="5":
            fieldnames=["code","name","department","teacher","students"]
            export_csv("courses.csv", courses, fieldnames)
        elif choice=="0": break
        else: print(Fore.RED + "Invalid choice!")

def list_courses(courses):
    print(Fore.CYAN + "Courses:")
    for c in courses:
        print(f"{c['code']} | {c['name']} | Dept: {c['department']} | Teacher: {c['teacher']} | Students:{len(c['students'])}")
    pause()

# ------------------------- Attendance -------------------------
def manage_attendance(admin=False, teacher=None):
    courses = load_data(COURSE_FILE)
    students = load_data(STUDENT_FILE)
    attendance = load_data(ATTENDANCE_FILE)
    if admin:
        list_courses(courses)
        code=input("Enter Course Code for attendance: ")
    elif teacher:
        teacher_courses=[c for c in courses if c["teacher"]==teacher]
        for c in teacher_courses:
            print(f"{c['code']} | {c['name']}")
        code=input("Enter your course code for attendance: ")
    course=next((c for c in courses if c["code"]==code),None)
    if not course: print(Fore.RED + "Course not found!"); return
    print(Fore.CYAN + f"Mark Attendance for {course['name']}")
    for sid in course["students"]:
        s=next((st for st in students if st["id"]==sid),None)
        if s:
            status=input(f"{s['name']} (P/A): ").upper()
            if status in ["P","A"]:
                attendance.append({"id":sid,"course":code,"date":str(datetime.today().date()),"status":status})
    save_data(ATTENDANCE_FILE, attendance)
    print(Fore.GREEN + "Attendance saved!")
    pause()

# ------------------------- Marks -------------------------
def manage_marks(admin=False, teacher=None):
    courses = load_data(COURSE_FILE)
    students = load_data(STUDENT_FILE)
    marks = load_data(MARKS_FILE)
    if admin:
        list_courses(courses)
        code=input("Enter Course Code for marks: ")
    elif teacher:
        teacher_courses=[c for c in courses if c["teacher"]==teacher]
        for c in teacher_courses:
            print(f"{c['code']} | {c['name']}")
        code=input("Enter your course code for marks: ")
    course=next((c for c in courses if c["code"]==code),None)
    if not course: print(Fore.RED + "Course not found!"); return
    print(Fore.CYAN + f"Enter Marks for {course['name']}")
    for sid in course["students"]:
        s=next((st for st in students if st["id"]==sid),None)
        if s:
            mark=input(f"{s['name']}: ")
            if mark.isdigit():
                marks.append({"id":sid,"course":code,"mark":int(mark)})
    save_data(MARKS_FILE, marks)
    print(Fore.GREEN + "Marks saved!")
    pause()

# ------------------------- Fees -------------------------
def manage_fees():
    students = load_data(STUDENT_FILE)
    fees = load_data(FEES_FILE)
    list_students(students)
    sid = input("Enter Student ID to add fee: ")
    student = next((s for s in students if s["id"]==sid), None)
    if student:
        amount = input("Enter Fee Amount: ")
        status = input("Status (Paid/Unpaid): ")
        fees.append({"id":sid,"amount":amount,"status":status})
        save_data(FEES_FILE, fees)
        print(Fore.GREEN + "Fee record saved!")
    else:
        print(Fore.RED + "Student not found!")
    pause()

# ------------------------- Certificates -------------------------
def manage_certificates():
    students = load_data(STUDENT_FILE)
    certificates = load_data(CERTIFICATE_FILE)
    list_students(students)
    sid = input("Enter Student ID to add certificate: ")
    student = next((s for s in students if s["id"]==sid), None)
    if student:
        cert_name=input("Certificate Name: ")
        certificates.append({"id":sid,"certificate":cert_name,"date":str(datetime.today().date())})
        save_data(CERTIFICATE_FILE, certificates)
        print(Fore.GREEN + "Certificate added!")
    else:
        print(Fore.RED + "Student not found!")
    pause()

# ------------------------- Reports -------------------------
def view_reports():
    print(Fore.CYAN + "--- Reports ---")
    print("1. Export All Students CSV")
    print("2. Export All Teachers CSV")
    print("3. Export All Courses CSV")
    print("4. Export Attendance CSV")
    print("5. Export Marks CSV")
    print("6. Export Fees CSV")
    print("7. Export Certificates CSV")
    print("0. Back")
    choice=input("Select: ")
    if choice=="1": export_csv("students.csv", load_data(STUDENT_FILE), ["id","name","department"])
    elif choice=="2": export_csv("teachers.csv", load_data(TEACHER_FILE), ["name","username","password","department"])
    elif choice=="3": export_csv("courses.csv", load_data(COURSE_FILE), ["code","name","department","teacher","students"])
    elif choice=="4": export_csv("attendance.csv", load_data(ATTENDANCE_FILE), ["id","course","date","status"])
    elif choice=="5": export_csv("marks.csv", load_data(MARKS_FILE), ["id","course","mark"])
    elif choice=="6": export_csv("fees.csv", load_data(FEES_FILE), ["id","amount","status"])
    elif choice=="7": export_csv("certificates.csv", load_data(CERTIFICATE_FILE), ["id","certificate","date"])
    pause()

# ------------------------- Dashboards -------------------------
def dashboards_statistics():
    students = load_data(STUDENT_FILE)
    teachers = load_data(TEACHER_FILE)
    courses = load_data(COURSE_FILE)
    print(Fore.CYAN + "--- Dashboard ---")
    print(f"Total Students: {len(students)}")
    print(f"Total Teachers: {len(teachers)}")
    print(f"Total Courses: {len(courses)}")
    pause()

# ------------------------- Run System -------------------------
if __name__ == "__main__":
    activate_system()
    while True:
        login()
        cont = input(Fore.YELLOW + "Exit system? (y/n): ").lower()
        if cont=="y":
            print(Fore.GREEN + "Exiting system...")
            break
# ------------------------- Teacher Features -------------------------
def view_teacher_courses(username, summary=False):
    courses = load_data(COURSE_FILE)
    students = load_data(STUDENT_FILE)
    teacher_courses = [c for c in courses if c["teacher"] == username]
    if not teacher_courses:
        print(Fore.RED + "No courses assigned to you!")
        pause()
        return
    for c in teacher_courses:
        print(Fore.CYAN + f"{c['code']} - {c['name']} | Dept: {c['department']}")
        if summary:
            enrolled_students = [s for s in students if s["id"] in c["students"]]
            print(Fore.YELLOW + f"Enrolled Students ({len(enrolled_students)}):")
            for s in enrolled_students:
                print(f" - {s['id']} | {s['name']}")
    pause()

def search_students():
    students = load_data(STUDENT_FILE)
    keyword = input("Enter student name or ID to search: ").lower()
    results = [s for s in students if keyword in s["name"].lower() or keyword in s["id"].lower()]
    if results:
        print(Fore.CYAN + "Search Results:")
        for s in results:
            print(f"{s['id']} | {s['name']} | Dept: {s['department']}")
    else:
        print(Fore.RED + "No students found.")
    pause()
# ------------------------- Student Restricted View -------------------------
# Full Student Login Access (View only, no edit)
def student_dashboard(student_id):
    while True:
        print_line()
        print(Fore.MAGENTA + "--- Student Dashboard ---")
        print("1. Attendance Summary")
        print("2. Marks / Progress Summary")
        print("3. Certificates")
        print("4. Fees Status")
        print("5. Courses Enrolled")
        print("0. Logout")
        choice = input("Select: ")
        if choice == "1":
            view_student_attendance(student_id)
        elif choice == "2":
            view_student_marks(student_id)
        elif choice == "3":
            view_student_certificates(student_id)
        elif choice == "4":
            view_student_fees(student_id)
        elif choice == "5":
            view_student_courses(student_id)
        elif choice == "0":
            break
        else:
            print(Fore.RED + "Invalid choice!")
def view_student_courses(student_id):
    courses = load_data(COURSE_FILE)
    enrolled_courses = [c for c in courses if student_id in c["students"]]
    if enrolled_courses:
        print(Fore.CYAN + "Enrolled Courses:")
        for c in enrolled_courses:
            print(f"{c['code']} | {c['name']} | Dept: {c['department']} | Teacher: {c['teacher']}")
    else:
        print(Fore.RED + "No courses enrolled.")
    pause()
# ------------------------- Detailed Attendance Report -------------------------
def attendance_report(student_id):
    attendance = load_data(ATTENDANCE_FILE)
    courses = load_data(COURSE_FILE)
    student_courses = [c for c in courses if student_id in c["students"]]
    print(Fore.CYAN + f"--- Detailed Attendance Report for {student_id} ---")
    for c in student_courses:
        course_attendance = [a for a in attendance if a["id"] == student_id and a["course"] == c["code"]]
        total = len(course_attendance)
        present = len([a for a in course_attendance if a["status"]=="P"])
        absent = total - present
        percent = (present / total * 100) if total>0 else 0
        print(Fore.YELLOW + f"{c['code']} - {c['name']}: Total={total}, Present={present}, Absent={absent}, Attendance%={percent:.2f}")
    pause()
# ------------------------- Advanced Dashboard -------------------------
def advanced_dashboard():
    students = load_data(STUDENT_FILE)
    teachers = load_data(TEACHER_FILE)
    courses = load_data(COURSE_FILE)
    attendance = load_data(ATTENDANCE_FILE)
    marks = load_data(MARKS_FILE)
    certificates = load_data(CERTIFICATE_FILE)
    fees = load_data(FEES_FILE)
    print(Fore.CYAN + "--- Advanced Dashboard ---")
    print(Fore.YELLOW + f"Total Students: {len(students)}")
    print(Fore.YELLOW + f"Total Teachers: {len(teachers)}")
    print(Fore.YELLOW + f"Total Courses: {len(courses)}")
    total_attendance = len(attendance)
    if total_attendance:
        present_count = len([a for a in attendance if a["status"]=="P"])
        absent_count = total_attendance - present_count
        print(Fore.YELLOW + f"Total Attendance Records: {total_attendance} | Present: {present_count} | Absent: {absent_count}")
    avg_marks = 0
    if marks:
        avg_marks = sum([m["mark"] for m in marks])/len(marks)
    print(Fore.YELLOW + f"Average Marks across all courses: {avg_marks:.2f}")
    print(Fore.YELLOW + f"Total Certificates issued: {len(certificates)}")
    print(Fore.YELLOW + f"Total Fee Records: {len(fees)}")
    pause()
# ------------------------- CSV Export Utility -------------------------
def export_csv(filename, data, fieldnames):
    if not data:
        print(Fore.RED + "No data to export!")
        return
    try:
        with open(filename, mode="w", newline="") as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            for d in data:
                writer.writerow(d)
        print(Fore.GREEN + f"Data exported to {filename}")
    except Exception as e:
        print(Fore.RED + f"Failed to export CSV: {e}")
    pause()
# ------------------------- Enrollment Management -------------------------
def enroll_student_in_course():
    students = load_data(STUDENT_FILE)
    courses = load_data(COURSE_FILE)
    list_students(students)
    sid = input("Enter Student ID to enroll: ")
    student = next((s for s in students if s["id"]==sid), None)
    if not student:
        print(Fore.RED + "Student not found!")
        pause()
        return
    list_courses(courses)
    code = input("Enter Course Code to enroll in: ")
    course = next((c for c in courses if c["code"]==code), None)
    if not course:
        print(Fore.RED + "Course not found!")
        pause()
        return
    if sid in course["students"]:
        print(Fore.YELLOW + "Student already enrolled in this course.")
    else:
        course["students"].append(sid)
        save_data(COURSE_FILE, courses)
        print(Fore.GREEN + f"Student {student['name']} enrolled in {course['name']}.")
    pause()
# ------------------------- Bulk Enrollment (for large colleges) -------------------------
def bulk_enrollment(student_ids, course_code):
    courses = load_data(COURSE_FILE)
    course = next((c for c in courses if c["code"]==course_code), None)
    if not course:
        print(Fore.RED + "Course not found!")
        return
    for sid in student_ids:
        if sid not in course["students"]:
            course["students"].append(sid)
    save_data(COURSE_FILE, courses)
    print(Fore.GREEN + f"{len(student_ids)} students enrolled in {course_code}.")
# ------------------------- Enhanced Attendance System -------------------------
def detailed_attendance_summary():
    attendance = load_data(ATTENDANCE_FILE)
    courses = load_data(COURSE_FILE)
    students = load_data(STUDENT_FILE)
    print(Fore.CYAN + "--- Detailed Attendance Summary ---")
    for c in courses:
        enrolled_students = [s for s in students if s["id"] in c["students"]]
        print(Fore.MAGENTA + f"{c['code']} - {c['name']} | Total Students: {len(enrolled_students)}")
        for s in enrolled_students:
            records = [a for a in attendance if a["id"]==s["id"] and a["course"]==c["code"]]
            total = len(records)
            present = len([r for r in records if r["status"]=="P"])
            absent = total - present
            percent = (present/total*100) if total>0 else 0
            print(f"{s['id']} | {s['name']} | Present: {present}, Absent: {absent}, %: {percent:.2f}")
    pause()
# ------------------------- Massive Data Handling for Colleges -------------------------
# Generate large number of students for testing
def generate_large_student_data(count=10000):
    students = load_data(STUDENT_FILE)
    departments = load_data(DEPARTMENT_FILE)
    for i in range(count):
        sid = f"S{i+1000:07d}"
        name = f"Student_{i+1}"
        dept_name = random.choice(departments)["name"] if departments else "General"
        students.append({"id":sid,"name":name,"department":dept_name})
    save_data(STUDENT_FILE, students)
    print(Fore.GREEN + f"{count} students generated.")
# ------------------------- Enhanced User Experience -------------------------
def clear_console():
    os.system("cls" if os.name=="nt" else "clear")

def pause(msg="Press Enter to continue..."):
    input(Fore.YELLOW + msg)

def print_line():
    print(Fore.BLUE + "-"*50)
# ------------------------- Student Views -------------------------
def view_student_attendance(student_id):
    attendance = load_data(ATTENDANCE_FILE)
    courses = load_data(COURSE_FILE)
    enrolled_courses = [c for c in courses if student_id in c["students"]]
    print(Fore.CYAN + "--- Attendance ---")
    for c in enrolled_courses:
        records = [a for a in attendance if a["id"]==student_id and a["course"]==c["code"]]
        total = len(records)
        present = len([r for r in records if r["status"]=="P"])
        absent = total - present
        percent = (present/total*100) if total>0 else 0
        print(f"{c['code']} | {c['name']} | Total: {total} | Present: {present} | Absent: {absent} | %: {percent:.2f}")
    pause()

def view_student_marks(student_id):
    marks = load_data(MARKS_FILE)
    courses = load_data(COURSE_FILE)
    student_courses = [c for c in courses if student_id in c["students"]]
    print(Fore.CYAN + "--- Marks / Progress ---")
    for c in student_courses:
        course_marks = [m for m in marks if m["id"]==student_id and m["course"]==c["code"]]
        for m in course_marks:
            print(f"{c['code']} | {c['name']} | Mark: {m['mark']}")
    pause()

def view_student_certificates(student_id):
    certificates = load_data(CERTIFICATE_FILE)
    student_certs = [c for c in certificates if c["id"]==student_id]
    print(Fore.CYAN + "--- Certificates ---")
    if student_certs:
        for c in student_certs:
            print(f"{c['certificate']} | Date: {c['date']}")
    else:
        print(Fore.YELLOW + "No certificates found.")
    pause()

def view_student_fees(student_id):
    fees = load_data(FEES_FILE)
    student_fees = [f for f in fees if f["id"]==student_id]
    print(Fore.CYAN + "--- Fees Status ---")
    if student_fees:
        for f in student_fees:
            print(f"Amount: {f['amount']} | Status: {f['status']}")
    else:
        print(Fore.YELLOW + "No fee records found.")
    pause()
# ------------------------- Teacher Views -------------------------
def teacher_dashboard(username):
    while True:
        print_line()
        print(Fore.MAGENTA + f"--- Teacher Dashboard ({username}) ---")
        print("1. View Courses & Students")
        print("2. Mark Attendance")
        print("3. Enter Marks")
        print("4. Reports / CSV Export")
        print("0. Logout")
        choice = input("Select: ")
        if choice=="1":
            view_teacher_courses(username, summary=True)
        elif choice=="2":
            manage_attendance(teacher=username)
        elif choice=="3":
            manage_marks(teacher=username)
        elif choice=="4":
            view_reports()
        elif choice=="0":
            break
        else:
            print(Fore.RED + "Invalid choice!")
# ------------------------- Admin Main Menu -------------------------
def admin_menu():
    while True:
        clear_console()
        print(Fore.MAGENTA + "--- Admin Main Menu ---")
        print("1. Manage Students")
        print("2. Manage Teachers")
        print("3. Manage Departments")
        print("4. Manage Courses")
        print("5. Enrollment Management")
        print("6. Attendance Management")
        print("7. Marks Management")
        print("8. Fees Management")
        print("9. Certificates Management")
        print("10. Reports / CSV Export")
        print("11. Advanced Dashboard")
        print("12. Bulk Enrollment")
        print("0. Logout")
        choice = input("Select: ")
        if choice=="1":
            manage_students()
        elif choice=="2":
            manage_teachers()
        elif choice=="3":
            manage_departments()
        elif choice=="4":
            manage_courses()
        elif choice=="5":
            enroll_student_in_course()
        elif choice=="6":
            manage_attendance(admin=True)
        elif choice=="7":
            manage_marks(admin=True)
        elif choice=="8":
            manage_fees()
        elif choice=="9":
            manage_certificates()
        elif choice=="10":
            view_reports()
        elif choice=="11":
            advanced_dashboard()
        elif choice=="12":
            # Example: enroll all students to a course (massive)
            course_code = input("Enter Course Code for bulk enrollment: ")
            students = load_data(STUDENT_FILE)
            student_ids = [s["id"] for s in students]
            bulk_enrollment(student_ids, course_code)
        elif choice=="0":
            break
        else:
            print(Fore.RED + "Invalid choice!")
# ------------------------- Login System -------------------------
def login():
    while True:
        clear_console()
        print(Fore.MAGENTA + "--- College Management System Login ---")
        username = input("Username: ")
        password = input("Password: ")
        # Admin default: admin/admin
        if username.lower()=="admin" and password.lower()=="admin":
            print(Fore.GREEN + "Admin login successful!")
            pause()
            admin_menu()
            break
        # Teacher login
        teachers = load_data(TEACHER_FILE)
        teacher = next((t for t in teachers if t["username"]==username and t["password"]==password), None)
        if teacher:
            print(Fore.GREEN + f"Welcome Teacher {teacher['name']}!")
            pause()
            teacher_dashboard(username)
            break
        # Student login
        students = load_data(STUDENT_FILE)
        student = next((s for s in students if s["id"]==username and password==s.get("password","123")), None)
        if student:
            print(Fore.GREEN + f"Welcome Student {student['name']}!")
            pause()
            student_dashboard(student["id"])
            break
        print(Fore.RED + "Invalid credentials, try again!")
# ------------------------- First-Time System Activation -------------------------
def activate_system():
    # Create data folder if not exists
    if not os.path.exists(DATA_FOLDER):
        os.makedirs(DATA_FOLDER)
    # Initialize all JSON files if missing
    files = [STUDENT_FILE, TEACHER_FILE, DEPARTMENT_FILE, COURSE_FILE, ATTENDANCE_FILE, MARKS_FILE, FEES_FILE, CERTIFICATE_FILE]
    for f in files:
        if not os.path.exists(f):
            with open(f,"w") as file:
                json.dump([], file)
    # Add default admin credentials
    teachers = load_data(TEACHER_FILE)
    if not teachers:
        print(Fore.YELLOW + "No teachers found. You can add teachers from Admin menu after login.")
    print(Fore.GREEN + "System activated and ready to use!")
    pause()
# ------------------------- Student Password Setup -------------------------
def setup_student_passwords():
    students = load_data(STUDENT_FILE)
    updated = False
    for s in students:
        if "password" not in s:
            s["password"] = "123"  # default password
            updated = True
    if updated:
        save_data(STUDENT_FILE, students)
        print(Fore.GREEN + "Default passwords set for all students (123).")
    pause()


# ------------------------- Massive College Simulation -------------------------
def simulate_large_college (num_students=2000000, num_departments=50, num_teachers=500, num_courses=200) :
    print(Fore.YELLOW + "Simulating large college data. This may take a few minutes...")
    departments = [{"name" : f"Department_{i + 1}"} for i in range(num_departments)]
    save_data(DEPARTMENT_FILE, departments)

    students = [{"id" : f"S{i + 1:07d}", "name" : f"Student_{i + 1}", "department" : random.choice(departments)["name"],
                 "password" : "123"} for i in range(num_students)]
    save_data(STUDENT_FILE, students)

    teachers = [{"name" : f"Teacher_{i + 1}", "username" : f"t{i + 1:05d}", "password" : "teach123",
                 "department" : random.choice(departments)["name"]} for i in range(num_teachers)]
    save_data(TEACHER_FILE, teachers)

    courses = [{"code" : f"C{i + 1:05d}", "name" : f"Course_{i + 1}", "department" : random.choice(departments)["name"],
                "teacher" : random.choice(teachers)["username"], "students" : []} for i in range(num_courses)]
    save_data(COURSE_FILE, courses)

    print(
        Fore.GREEN + f"Simulation completed: {num_students} students, {num_teachers} teachers, {num_courses} courses, {num_departments} departments.")
    pause()


# ------------------------- Main Program Entry -------------------------
if __name__ == "__main__" :
    activate_system()
    setup_student_passwords()

    # Optional: Uncomment the next line to simulate a massive college
    # simulate_large_college(num_students=2000000, num_departments=50, num_teachers=500, num_courses=200)

    while True :
        login()
        cont = input(Fore.YELLOW + "Exit system? (y/n): ").lower()
        if cont == "y" :
            print(Fore.GREEN + "Exiting College Management System...")
            break
# ------------------------- Polished Console Menus -------------------------
def print_header(title):
    print(Fore.CYAN + "="*70)
    print(Fore.MAGENTA + title.center(70))
    print(Fore.CYAN + "="*70)

def print_subheader(subtitle):
    print(Fore.YELLOW + "-"*70)
    print(Fore.GREEN + subtitle.center(70))
    print(Fore.YELLOW + "-"*70)
# ------------------------- Enhanced Admin Menu -------------------------
def admin_menu():
    while True:
        clear_console()
        print_header("Admin Main Menu")
        print(Fore.CYAN + "1. Manage Students")
        print("2. Manage Teachers")
        print("3. Manage Departments")
        print("4. Manage Courses")
        print("5. Enrollment Management")
        print("6. Attendance Management")
        print("7. Marks Management")
        print("8. Fees Management")
        print("9. Certificates Management")
        print("10. Reports / CSV Export")
        print("11. Advanced Dashboard")
        print("12. Bulk Enrollment")
        print("0. Logout")
        choice = input(Fore.YELLOW + "Select option: ")
        if choice=="1":
            manage_students()
        elif choice=="2":
            manage_teachers()
        elif choice=="3":
            manage_departments()
        elif choice=="4":
            manage_courses()
        elif choice=="5":
            enroll_student_in_course()
        elif choice=="6":
            manage_attendance(admin=True)
        elif choice=="7":
            manage_marks(admin=True)
        elif choice=="8":
            manage_fees()
        elif choice=="9":
            manage_certificates()
        elif choice=="10":
            view_reports()
        elif choice=="11":
            advanced_dashboard()
        elif choice=="12":
            course_code = input(Fore.YELLOW + "Enter Course Code for bulk enrollment: ")
            students = load_data(STUDENT_FILE)
            student_ids = [s["id"] for s in students]
            bulk_enrollment(student_ids, course_code)
        elif choice=="0":
            break
        else:
            print(Fore.RED + "Invalid choice! Try again.")
            pause()
# ------------------------- Enhanced Teacher Menu -------------------------
def teacher_dashboard(username):
    while True:
        clear_console()
        print_header(f"Teacher Dashboard ({username})")
        print(Fore.CYAN + "1. View Courses & Students")
        print("2. Mark Attendance")
        print("3. Enter Marks")
        print("4. Reports / CSV Export")
        print("0. Logout")
        choice = input(Fore.YELLOW + "Select option: ")
        if choice=="1":
            view_teacher_courses(username, summary=True)
        elif choice=="2":
            manage_attendance(teacher=username)
        elif choice=="3":
            manage_marks(teacher=username)
        elif choice=="4":
            view_reports()
        elif choice=="0":
            break
        else:
            print(Fore.RED + "Invalid choice! Try again.")
            pause()
# ------------------------- Enhanced Student Menu -------------------------
def student_dashboard(student_id):
    while True:
        clear_console()
        print_header(f"Student Dashboard ({student_id})")
        print(Fore.CYAN + "1. Attendance Summary")
        print("2. Marks / Progress Summary")
        print("3. Certificates")
        print("4. Fees Status")
        print("5. Courses Enrolled")
        print("0. Logout")
        choice = input(Fore.YELLOW + "Select option: ")
        if choice=="1":
            view_student_attendance(student_id)
        elif choice=="2":
            view_student_marks(student_id)
        elif choice=="3":
            view_student_certificates(student_id)
        elif choice=="4":
            view_student_fees(student_id)
        elif choice=="5":
            view_student_courses(student_id)
        elif choice=="0":
            break
        else:
            print(Fore.RED + "Invalid choice! Try again.")
            pause()
# ------------------------- Final Login Screen -------------------------
def login():
    while True:
        clear_console()
        print_header("College Management System Login")
        username = input(Fore.CYAN + "Username: ")
        password = input(Fore.CYAN + "Password: ")
        # Admin login
        if username.lower()=="admin" and password.lower()=="admin":
            print(Fore.GREEN + "Admin login successful!")
            pause()
            admin_menu()
            break
        # Teacher login
        teachers = load_data(TEACHER_FILE)
        teacher = next((t for t in teachers if t["username"]==username and t["password"]==password), None)
        if teacher:
            print(Fore.GREEN + f"Welcome Teacher {teacher['name']}!")
            pause()
            teacher_dashboard(username)
            break
        # Student login
        students = load_data(STUDENT_FILE)
        student = next((s for s in students if s["id"]==username and password==s.get("password","123")), None)
        if student:
            print(Fore.GREEN + f"Welcome Student {student['name']}!")
            pause()
            student_dashboard(student["id"])
            break
        print(Fore.RED + "Invalid credentials, try again!")
        pause()
